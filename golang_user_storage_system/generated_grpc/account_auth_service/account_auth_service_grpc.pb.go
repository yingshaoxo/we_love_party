// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: account_auth_service.proto

package account_auth_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AccountAuthenticationServiceClient is the client API for AccountAuthenticationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountAuthenticationServiceClient interface {
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	UserRegisterRequest(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterReply, error)
	UserRegisterConfirm(ctx context.Context, in *RegisterConfirmRequest, opts ...grpc.CallOption) (*RegisterConfirmReply, error)
	JWTIsOK(ctx context.Context, in *JWTIsOKRequest, opts ...grpc.CallOption) (*JWTIsOKReply, error)
}

type accountAuthenticationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountAuthenticationServiceClient(cc grpc.ClientConnInterface) AccountAuthenticationServiceClient {
	return &accountAuthenticationServiceClient{cc}
}

func (c *accountAuthenticationServiceClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/account_auth_service.AccountAuthenticationService/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountAuthenticationServiceClient) UserRegisterRequest(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterReply, error) {
	out := new(RegisterReply)
	err := c.cc.Invoke(ctx, "/account_auth_service.AccountAuthenticationService/UserRegisterRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountAuthenticationServiceClient) UserRegisterConfirm(ctx context.Context, in *RegisterConfirmRequest, opts ...grpc.CallOption) (*RegisterConfirmReply, error) {
	out := new(RegisterConfirmReply)
	err := c.cc.Invoke(ctx, "/account_auth_service.AccountAuthenticationService/UserRegisterConfirm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountAuthenticationServiceClient) JWTIsOK(ctx context.Context, in *JWTIsOKRequest, opts ...grpc.CallOption) (*JWTIsOKReply, error) {
	out := new(JWTIsOKReply)
	err := c.cc.Invoke(ctx, "/account_auth_service.AccountAuthenticationService/JWTIsOK", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountAuthenticationServiceServer is the server API for AccountAuthenticationService service.
// All implementations must embed UnimplementedAccountAuthenticationServiceServer
// for forward compatibility
type AccountAuthenticationServiceServer interface {
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	UserRegisterRequest(context.Context, *RegisterRequest) (*RegisterReply, error)
	UserRegisterConfirm(context.Context, *RegisterConfirmRequest) (*RegisterConfirmReply, error)
	JWTIsOK(context.Context, *JWTIsOKRequest) (*JWTIsOKReply, error)
	mustEmbedUnimplementedAccountAuthenticationServiceServer()
}

// UnimplementedAccountAuthenticationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAccountAuthenticationServiceServer struct {
}

func (UnimplementedAccountAuthenticationServiceServer) SayHello(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedAccountAuthenticationServiceServer) UserRegisterRequest(context.Context, *RegisterRequest) (*RegisterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserRegisterRequest not implemented")
}
func (UnimplementedAccountAuthenticationServiceServer) UserRegisterConfirm(context.Context, *RegisterConfirmRequest) (*RegisterConfirmReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserRegisterConfirm not implemented")
}
func (UnimplementedAccountAuthenticationServiceServer) JWTIsOK(context.Context, *JWTIsOKRequest) (*JWTIsOKReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JWTIsOK not implemented")
}
func (UnimplementedAccountAuthenticationServiceServer) mustEmbedUnimplementedAccountAuthenticationServiceServer() {
}

// UnsafeAccountAuthenticationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountAuthenticationServiceServer will
// result in compilation errors.
type UnsafeAccountAuthenticationServiceServer interface {
	mustEmbedUnimplementedAccountAuthenticationServiceServer()
}

func RegisterAccountAuthenticationServiceServer(s grpc.ServiceRegistrar, srv AccountAuthenticationServiceServer) {
	s.RegisterService(&AccountAuthenticationService_ServiceDesc, srv)
}

func _AccountAuthenticationService_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountAuthenticationServiceServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account_auth_service.AccountAuthenticationService/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountAuthenticationServiceServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountAuthenticationService_UserRegisterRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountAuthenticationServiceServer).UserRegisterRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account_auth_service.AccountAuthenticationService/UserRegisterRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountAuthenticationServiceServer).UserRegisterRequest(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountAuthenticationService_UserRegisterConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterConfirmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountAuthenticationServiceServer).UserRegisterConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account_auth_service.AccountAuthenticationService/UserRegisterConfirm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountAuthenticationServiceServer).UserRegisterConfirm(ctx, req.(*RegisterConfirmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountAuthenticationService_JWTIsOK_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JWTIsOKRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountAuthenticationServiceServer).JWTIsOK(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account_auth_service.AccountAuthenticationService/JWTIsOK",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountAuthenticationServiceServer).JWTIsOK(ctx, req.(*JWTIsOKRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountAuthenticationService_ServiceDesc is the grpc.ServiceDesc for AccountAuthenticationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountAuthenticationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "account_auth_service.AccountAuthenticationService",
	HandlerType: (*AccountAuthenticationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _AccountAuthenticationService_SayHello_Handler,
		},
		{
			MethodName: "UserRegisterRequest",
			Handler:    _AccountAuthenticationService_UserRegisterRequest_Handler,
		},
		{
			MethodName: "UserRegisterConfirm",
			Handler:    _AccountAuthenticationService_UserRegisterConfirm_Handler,
		},
		{
			MethodName: "JWTIsOK",
			Handler:    _AccountAuthenticationService_JWTIsOK_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "account_auth_service.proto",
}
