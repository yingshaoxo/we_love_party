# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: account_auth_service.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class HelloRequest(betterproto.Message):
    name: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class HelloReply(betterproto.Message):
    message: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class Empty(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class RegisterRequest(betterproto.Message):
    email: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class RegisterReply(betterproto.Message):
    result: str = betterproto.string_field(1)
    error: Optional[str] = betterproto.string_field(2, optional=True, group="_error")


@dataclass(eq=False, repr=False)
class RegisterConfirmRequest(betterproto.Message):
    email: str = betterproto.string_field(1)
    random_string: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class RegisterConfirmReply(betterproto.Message):
    jwt: str = betterproto.string_field(1)
    error: Optional[str] = betterproto.string_field(2, optional=True, group="_error")


@dataclass(eq=False, repr=False)
class JwtIsOkRequest(betterproto.Message):
    jwt: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class JwtIsOkReply(betterproto.Message):
    email: str = betterproto.string_field(1)
    error: Optional[str] = betterproto.string_field(2, optional=True, group="_error")


class AccountAuthenticationServiceStub(betterproto.ServiceStub):
    async def say_hello(
        self,
        hello_request: "HelloRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "HelloReply":
        return await self._unary_unary(
            "/account_auth_service.AccountAuthenticationService/SayHello",
            hello_request,
            HelloReply,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def user_register_request(
        self,
        register_request: "RegisterRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "RegisterReply":
        return await self._unary_unary(
            "/account_auth_service.AccountAuthenticationService/UserRegisterRequest",
            register_request,
            RegisterReply,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def user_register_confirm(
        self,
        register_confirm_request: "RegisterConfirmRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "RegisterConfirmReply":
        return await self._unary_unary(
            "/account_auth_service.AccountAuthenticationService/UserRegisterConfirm",
            register_confirm_request,
            RegisterConfirmReply,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def jwt_is_ok(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "JwtIsOkReply":
        return await self._unary_unary(
            "/account_auth_service.AccountAuthenticationService/JWTIsOK",
            jwt_is_ok_request,
            JwtIsOkReply,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class AccountAuthenticationServiceBase(ServiceBase):
    async def say_hello(self, hello_request: "HelloRequest") -> "HelloReply":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def user_register_request(
        self, register_request: "RegisterRequest"
    ) -> "RegisterReply":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def user_register_confirm(
        self, register_confirm_request: "RegisterConfirmRequest"
    ) -> "RegisterConfirmReply":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def jwt_is_ok(self) -> "JwtIsOkReply":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_say_hello(
        self, stream: "grpclib.server.Stream[HelloRequest, HelloReply]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.say_hello(request)
        await stream.send_message(response)

    async def __rpc_user_register_request(
        self, stream: "grpclib.server.Stream[RegisterRequest, RegisterReply]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.user_register_request(request)
        await stream.send_message(response)

    async def __rpc_user_register_confirm(
        self,
        stream: "grpclib.server.Stream[RegisterConfirmRequest, RegisterConfirmReply]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.user_register_confirm(request)
        await stream.send_message(response)

    async def __rpc_jwt_is_ok(
        self, stream: "grpclib.server.Stream[JwtIsOkRequest, JwtIsOkReply]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.jwt_is_ok(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/account_auth_service.AccountAuthenticationService/SayHello": grpclib.const.Handler(
                self.__rpc_say_hello,
                grpclib.const.Cardinality.UNARY_UNARY,
                HelloRequest,
                HelloReply,
            ),
            "/account_auth_service.AccountAuthenticationService/UserRegisterRequest": grpclib.const.Handler(
                self.__rpc_user_register_request,
                grpclib.const.Cardinality.UNARY_UNARY,
                RegisterRequest,
                RegisterReply,
            ),
            "/account_auth_service.AccountAuthenticationService/UserRegisterConfirm": grpclib.const.Handler(
                self.__rpc_user_register_confirm,
                grpclib.const.Cardinality.UNARY_UNARY,
                RegisterConfirmRequest,
                RegisterConfirmReply,
            ),
            "/account_auth_service.AccountAuthenticationService/JWTIsOK": grpclib.const.Handler(
                self.__rpc_jwt_is_ok,
                grpclib.const.Cardinality.UNARY_UNARY,
                JwtIsOkRequest,
                JwtIsOkReply,
            ),
        }
