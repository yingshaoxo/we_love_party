# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: chat_with_friends_service.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


class ChatMessageType(betterproto.Enum):
    text = 0
    picture = 1
    audio = 2
    video = 3
    file = 4


@dataclass(eq=False, repr=False)
class ChatMessage(betterproto.Message):
    from_email: str = betterproto.string_field(1)
    to_email: str = betterproto.string_field(2)
    message_type: "ChatMessageType" = betterproto.enum_field(3)
    content: str = betterproto.string_field(4)
    date_in_seconds_in_unix_timestamps: int = betterproto.int32_field(5)


@dataclass(eq=False, repr=False)
class AddOrUpdateFriendRequest(betterproto.Message):
    """
    one user can only be added 100 times by others per day(24hours); but she/he
    can add others without limitation
    """

    your_email: str = betterproto.string_field(1)
    friend: "Friend" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class Friend(betterproto.Message):
    email: str = betterproto.string_field(1)
    name: str = betterproto.string_field(2)
    nickname: str = betterproto.string_field(3)
    got_blocked: bool = betterproto.bool_field(4)
    super_like: bool = betterproto.bool_field(5)


@dataclass(eq=False, repr=False)
class AddOrUpdateFriendResponse(betterproto.Message):
    error: Optional[str] = betterproto.string_field(1, optional=True, group="_error")


@dataclass(eq=False, repr=False)
class GetFriendListRequest(betterproto.Message):
    your_email: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetFriendListResponse(betterproto.Message):
    error: Optional[str] = betterproto.string_field(1, optional=True, group="_error")
    friend_list: List["Friend"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class DeleteFriendRequest(betterproto.Message):
    your_email: str = betterproto.string_field(1)
    friend_email: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class DeleteFriendResponse(betterproto.Message):
    error: Optional[str] = betterproto.string_field(1, optional=True, group="_error")


class ChatWithFriendsServiceStub(betterproto.ServiceStub):
    async def add_or_update_friend(
        self,
        add_or_update_friend_request: "AddOrUpdateFriendRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "AddOrUpdateFriendResponse":
        return await self._unary_unary(
            "/chat_with_friends_service.ChatWithFriendsService/AddOrUpdateFriend",
            add_or_update_friend_request,
            AddOrUpdateFriendResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_friend_list(
        self,
        get_friend_list_request: "GetFriendListRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetFriendListResponse":
        return await self._unary_unary(
            "/chat_with_friends_service.ChatWithFriendsService/GetFriendList",
            get_friend_list_request,
            GetFriendListResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete_friend(
        self,
        delete_friend_request: "DeleteFriendRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "DeleteFriendResponse":
        return await self._unary_unary(
            "/chat_with_friends_service.ChatWithFriendsService/DeleteFriend",
            delete_friend_request,
            DeleteFriendResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class ChatWithFriendsServiceBase(ServiceBase):
    async def add_or_update_friend(
        self, add_or_update_friend_request: "AddOrUpdateFriendRequest"
    ) -> "AddOrUpdateFriendResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_friend_list(
        self, get_friend_list_request: "GetFriendListRequest"
    ) -> "GetFriendListResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_friend(
        self, delete_friend_request: "DeleteFriendRequest"
    ) -> "DeleteFriendResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_add_or_update_friend(
        self,
        stream: "grpclib.server.Stream[AddOrUpdateFriendRequest, AddOrUpdateFriendResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.add_or_update_friend(request)
        await stream.send_message(response)

    async def __rpc_get_friend_list(
        self,
        stream: "grpclib.server.Stream[GetFriendListRequest, GetFriendListResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_friend_list(request)
        await stream.send_message(response)

    async def __rpc_delete_friend(
        self, stream: "grpclib.server.Stream[DeleteFriendRequest, DeleteFriendResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.delete_friend(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/chat_with_friends_service.ChatWithFriendsService/AddOrUpdateFriend": grpclib.const.Handler(
                self.__rpc_add_or_update_friend,
                grpclib.const.Cardinality.UNARY_UNARY,
                AddOrUpdateFriendRequest,
                AddOrUpdateFriendResponse,
            ),
            "/chat_with_friends_service.ChatWithFriendsService/GetFriendList": grpclib.const.Handler(
                self.__rpc_get_friend_list,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetFriendListRequest,
                GetFriendListResponse,
            ),
            "/chat_with_friends_service.ChatWithFriendsService/DeleteFriend": grpclib.const.Handler(
                self.__rpc_delete_friend,
                grpclib.const.Cardinality.UNARY_UNARY,
                DeleteFriendRequest,
                DeleteFriendResponse,
            ),
        }
